
/**
 * SASS-MEDIA
 *
 * Media query shorthand sugar for SASS.
 *
 * @version 0.1.0
 * @author Wilson Page <wilsonpage@me.com>
 * @licence MIT
 */

$media-defined-names: ();
$media-defined-values: ();


@function media-value($name) {
  $index: index($media-defined-names, $name);

  @if ($index == false) {
    @return false;
  } @else {
    @return nth($media-defined-values, $index);
  }
}

// Outputs a media query
// by interpretting the
// spaces and `and` and
// commas as commas.
@mixin media($args...) {
  $list: ();

  @each $arg in $args {
    $list: append($list, and-media($arg), comma);
  }

  @media #{$list} {
    @content;
  }
}

// Accepts a space seprated list
// of breakpoints and returns
// a bracketed and sperated string
// ready tp be used after `@media`.
//
// Example:
//
//   and-media(large portrait);
//   // => (min-width: 480px) and (orientation: portrait)
//
@function and-media($arg) {
  $list: join($arg, null, comma);
  $length: length($list) - 1;
  $query: '';
  $i: 0;

  @each $item in $list {
    @if ($item) {
      $i: $i + 1;

      // Attempt to match the value
      // with a defined key,
      $value: media-value($item);
      @if ($value) {
        $value: '(' + $value + ')';
      } @else {
         $value: '(' + $item + ')';
      }


      @if ($i < $length) {
        $value: $value + ' and ';
      }

      $query: $query + $value;
    }
  }

  @return unquote($query);
}


@function media-define($name, $rule) {
  $media-defined-names: append($media-defined-names, $name);
  $media-defined-values: append($media-defined-values, $rule);
  @return $rule;
}